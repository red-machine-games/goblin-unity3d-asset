{
    "docs": [
        {
            "location": "/", 
            "text": "GbaseAPI client\n\n\nGbaseApi client is a lightweight client to store profiles at gbase-server.\n\n\nFeatures\n\n\nAsset allow you to focus on building client code and help to manipulate profiles data.\n\n\n\n\nEach user have own account and profile\n\n\nYou can choose how profile data will look like\n\n\n\n\nDownload unitypackege\n\n\nDownload\n\n\nNext step\n\n\nHow to setup page", 
            "title": "Introduction"
        }, 
        {
            "location": "/#gbaseapi-client", 
            "text": "GbaseApi client is a lightweight client to store profiles at gbase-server.", 
            "title": "GbaseAPI client"
        }, 
        {
            "location": "/#features", 
            "text": "Asset allow you to focus on building client code and help to manipulate profiles data.   Each user have own account and profile  You can choose how profile data will look like", 
            "title": "Features"
        }, 
        {
            "location": "/#download-unitypackege", 
            "text": "Download", 
            "title": "Download unitypackege"
        }, 
        {
            "location": "/#next-step", 
            "text": "How to setup page", 
            "title": "Next step"
        }, 
        {
            "location": "/setup/", 
            "text": "Setup guide\n\n\n\n\nImport package into your project\n\n\nAdd \nGbaseAPI.cs\n script to any gameobject in you scene. \nGbaseAPI.cs\n puts its gameobject to \nDonDestroyOnLoad\n part, so make sure, you wont Destroy this gameobject at runtime.\n\n\n\n\nSet required fields:  \n\n\n\n\nHmac Secret\n - server side security key\n\n\nProject Name\n, \nEnvironment\n and \nDomain Name\n - base path of the requests \n\n\nPlatform\n - specify build platform\n\n\nVersion\n - minimal server version\n\n\n\n\n\n\n\n\n\n\nPress \"Test\" button. If you correctly setup \nProject Name\n, \nEnvironment\n and \nDomain Name\n, then you will get success dialog window;\n\n\n\n\n\n\nNext step\n\n\nAuthentication page\n  \n\n\nSee also \nexamples page", 
            "title": "Setup"
        }, 
        {
            "location": "/setup/#setup-guide", 
            "text": "Import package into your project  Add  GbaseAPI.cs  script to any gameobject in you scene.  GbaseAPI.cs  puts its gameobject to  DonDestroyOnLoad  part, so make sure, you wont Destroy this gameobject at runtime.   Set required fields:     Hmac Secret  - server side security key  Project Name ,  Environment  and  Domain Name  - base path of the requests   Platform  - specify build platform  Version  - minimal server version      Press \"Test\" button. If you correctly setup  Project Name ,  Environment  and  Domain Name , then you will get success dialog window;", 
            "title": "Setup guide"
        }, 
        {
            "location": "/setup/#next-step", 
            "text": "Authentication page     See also  examples page", 
            "title": "Next step"
        }, 
        {
            "location": "/auth/", 
            "text": "Authentication\n\n\nGbaseApi has 4 authentication methods:\n\n\n\n\nAuthGuest(bool doNotRemeberIdSecret, Action callback)\n - basic authorization. If it's first authorization of a user, method will create new account and profile for user and if \ndoNotRemeberIdSecret == false\n save account id and secret to PlayerPrefs. If user already has account id and secret, method will authorize user with this id and secret and get existing account and profile. Method only do authorization once per session, and wont reauthorize user after first call of any method: \nAuthGuest\n, \nAuthGuestCustom\n, \nAuthWebVk\n, \nAuthVkSdk\n, \nAuthWebOdnoklassniki\n or \nAuthOdnoklassnikiSdk\n.\n\n\nAuthGuestCustom(string gCustomId, string gCsutomSecret, bool createIfNotExisting, bool doNotRemeberIdSecret, Action callback)\n - same as previous method, but uses custom id and secret params instead of already existing native id and secret. If \ncreateIfNotExisting\n flag is true method will create new account and profile for user if it doesn't exist. If \ndoNotRemeberIdSecret == false\n save account id and secret to PlayerPrefs. If user already has account id and secret, method will authorize user with this id and secret and get existing account and profile. Method only do authorization once per session, and wont reauthorize user after first call of any method \nAuthGuest\n, \nAuthGuestCustom\n, \nAuthWebVk\n, \nAuthVkSdk\n, \nAuthWebOdnoklassniki\n or \nAuthOdnoklassnikiSdk\n.\n\n\nAuthGuestNew(bool doNotRemeberIdSecret, Action callback)\n - it is the same authorization method as \nAuthGuest\n, but it always create new account and profile. Parameter \ndoNotRemeberIdSecret\n works the same way.\n\n\nAuthWebVk(string vkId, string vkSecret, Action callback)\n - authorization with data received from VK API. Method works only with \nwebvk\n platform and don't override previous account id and secret if they exist in PlayerPrefs. Method only do authorization once per session, and wont reauthorize user after first call of any method: \nAuthGuest\n, \nAuthGuestCustom\n, \nAuthWebVk\n, \nAuthVkSdk\n, \nAuthWebOdnoklassniki\n or \nAuthOdnoklassnikiSdk\n.\n\n\nAuthVkSdk(string vkToken, Action callback)\n - authorization with token received from VK SDK. Method works only with \nios\n, \nandroid\n and \nstdl\n platform and don't override previous account id and secret if they exist in PlayerPrefs. Method only do authorization once per session, and wont reauthorize user after first call of any method: \nAuthGuest\n, \nAuthGuestCustom\n, \nAuthWebVk\n, \nAuthVkSdk\n, \nAuthWebOdnoklassniki\n or \nAuthOdnoklassnikiSdk\n.\n\n\nAuthWebOdnoklassniki(string okSecret, string okId, string okSessionKey, Action callback)\n - authorization with data received from Odnoklassniki API. Method works only with \nwebok\n platform and don't override previous account id and secret if they exist in PlayerPrefs. Method only do authorization once per session, and wont reauthorize user after first call of any method: \nAuthGuest\n, \nAuthGuestCustom\n, \nAuthWebVk\n, \nAuthVkSdk\n, \nAuthWebOdnoklassniki\n or \nAuthOdnoklassnikiSdk\n.\n\n\nAuthOdnoklassnikiSdk(string okToken, Action callback)\n - authorization with token received from Odnoklassniki SDK. Method works only with \nios\n, \nandroid\n and \nstdl\n platform and don't override previous account id and secret if they exist in PlayerPrefs. Method only do authorization once per session, and wont reauthorize user after first call of any method: \nAuthGuest\n, \nAuthGuestCustom\n, \nAuthWebVk\n, \nAuthVkSdk\n, \nAuthWebOdnoklassniki\n or \nAuthOdnoklassnikiSdk\n.\n\n\n\n\nAll authenticate methods rewrite temporary account and profile data. Callback action is called when authentication is done.\n\n\nGbaseApi can reauth by itself if session is dead and public flag \nAutoReauth\n is true. You can set it in editor or while runtime via scripts.\n\n\nMethod \nGetClientIdAndSecret()\n returns object of type \nGClientData\n with two variables \nGClientId\n and \nGClientSecret\n.\n\n\nMethod \nQuit()\n resets current session and deletes info about loaded account and profile. After calling this method you can authenticate again.\n\n\nNext step\n\n\nProfile page\n  \n\n\nSee also \nexamples page", 
            "title": "Authentication"
        }, 
        {
            "location": "/auth/#authentication", 
            "text": "GbaseApi has 4 authentication methods:   AuthGuest(bool doNotRemeberIdSecret, Action callback)  - basic authorization. If it's first authorization of a user, method will create new account and profile for user and if  doNotRemeberIdSecret == false  save account id and secret to PlayerPrefs. If user already has account id and secret, method will authorize user with this id and secret and get existing account and profile. Method only do authorization once per session, and wont reauthorize user after first call of any method:  AuthGuest ,  AuthGuestCustom ,  AuthWebVk ,  AuthVkSdk ,  AuthWebOdnoklassniki  or  AuthOdnoklassnikiSdk .  AuthGuestCustom(string gCustomId, string gCsutomSecret, bool createIfNotExisting, bool doNotRemeberIdSecret, Action callback)  - same as previous method, but uses custom id and secret params instead of already existing native id and secret. If  createIfNotExisting  flag is true method will create new account and profile for user if it doesn't exist. If  doNotRemeberIdSecret == false  save account id and secret to PlayerPrefs. If user already has account id and secret, method will authorize user with this id and secret and get existing account and profile. Method only do authorization once per session, and wont reauthorize user after first call of any method  AuthGuest ,  AuthGuestCustom ,  AuthWebVk ,  AuthVkSdk ,  AuthWebOdnoklassniki  or  AuthOdnoklassnikiSdk .  AuthGuestNew(bool doNotRemeberIdSecret, Action callback)  - it is the same authorization method as  AuthGuest , but it always create new account and profile. Parameter  doNotRemeberIdSecret  works the same way.  AuthWebVk(string vkId, string vkSecret, Action callback)  - authorization with data received from VK API. Method works only with  webvk  platform and don't override previous account id and secret if they exist in PlayerPrefs. Method only do authorization once per session, and wont reauthorize user after first call of any method:  AuthGuest ,  AuthGuestCustom ,  AuthWebVk ,  AuthVkSdk ,  AuthWebOdnoklassniki  or  AuthOdnoklassnikiSdk .  AuthVkSdk(string vkToken, Action callback)  - authorization with token received from VK SDK. Method works only with  ios ,  android  and  stdl  platform and don't override previous account id and secret if they exist in PlayerPrefs. Method only do authorization once per session, and wont reauthorize user after first call of any method:  AuthGuest ,  AuthGuestCustom ,  AuthWebVk ,  AuthVkSdk ,  AuthWebOdnoklassniki  or  AuthOdnoklassnikiSdk .  AuthWebOdnoklassniki(string okSecret, string okId, string okSessionKey, Action callback)  - authorization with data received from Odnoklassniki API. Method works only with  webok  platform and don't override previous account id and secret if they exist in PlayerPrefs. Method only do authorization once per session, and wont reauthorize user after first call of any method:  AuthGuest ,  AuthGuestCustom ,  AuthWebVk ,  AuthVkSdk ,  AuthWebOdnoklassniki  or  AuthOdnoklassnikiSdk .  AuthOdnoklassnikiSdk(string okToken, Action callback)  - authorization with token received from Odnoklassniki SDK. Method works only with  ios ,  android  and  stdl  platform and don't override previous account id and secret if they exist in PlayerPrefs. Method only do authorization once per session, and wont reauthorize user after first call of any method:  AuthGuest ,  AuthGuestCustom ,  AuthWebVk ,  AuthVkSdk ,  AuthWebOdnoklassniki  or  AuthOdnoklassnikiSdk .   All authenticate methods rewrite temporary account and profile data. Callback action is called when authentication is done.  GbaseApi can reauth by itself if session is dead and public flag  AutoReauth  is true. You can set it in editor or while runtime via scripts.  Method  GetClientIdAndSecret()  returns object of type  GClientData  with two variables  GClientId  and  GClientSecret .  Method  Quit()  resets current session and deletes info about loaded account and profile. After calling this method you can authenticate again.", 
            "title": "Authentication"
        }, 
        {
            "location": "/auth/#next-step", 
            "text": "Profile page     See also  examples page", 
            "title": "Next step"
        }, 
        {
            "location": "/profile/", 
            "text": "Profile\n\n\nAfter successful authentication you can call \nGbaseAPI.Instance.Profile\n to get access to user profile.\n\nProfile method:\n\n\n\n\nint\n GetHumanId()\n - returns readable id of user's profile.\n\n\nstring or null\n GetOkId()\n - returns id received from Odnoklassniki API and stored in profile, after authenticating via \nAuthOdnoklassniki\n method.\n\n\nint\n GetVer()\n - returns version of user's profile\n\n\nvoid\n SetVer(int v)\n - sets version of user's profile\n\n\nT\n GetProfileData\nT>()\n - returns object of class \nT\n representing private profile data.\n\n\nvoid\n SetProfileData\nT>(T data)\n - rewrite local private profile data. To persist changes to server you should call \nFlushData()\n method;\n\n\nT\n GetPublicProfileData\nT>()\n - returns object of class \nT\n representing public profile data.\n\n\nvoid\n SetProfileData\nT>(T data)\n - rewrite local public profile data. To persist changes to server you should call \nFlushData()\n method;\n\n\nvoid\n FlushData()\n - send all profile changes to the server\n\n\n\n\nNext step\n\n\nRecords and leaderboards page\n  \n\n\nSee also \nexamples page", 
            "title": "Profile"
        }, 
        {
            "location": "/profile/#profile", 
            "text": "After successful authentication you can call  GbaseAPI.Instance.Profile  to get access to user profile. \nProfile method:   int  GetHumanId()  - returns readable id of user's profile.  string or null  GetOkId()  - returns id received from Odnoklassniki API and stored in profile, after authenticating via  AuthOdnoklassniki  method.  int  GetVer()  - returns version of user's profile  void  SetVer(int v)  - sets version of user's profile  T  GetProfileData T>()  - returns object of class  T  representing private profile data.  void  SetProfileData T>(T data)  - rewrite local private profile data. To persist changes to server you should call  FlushData()  method;  T  GetPublicProfileData T>()  - returns object of class  T  representing public profile data.  void  SetProfileData T>(T data)  - rewrite local public profile data. To persist changes to server you should call  FlushData()  method;  void  FlushData()  - send all profile changes to the server", 
            "title": "Profile"
        }, 
        {
            "location": "/profile/#next-step", 
            "text": "Records and leaderboards page     See also  examples page", 
            "title": "Next step"
        }, 
        {
            "location": "/records/", 
            "text": "Records and leaderboards\n\n\nAsset allow you to persist important values as \"records\". Just choose segment and save record or get top records of that segment.\n\n\nRecords method:\n\n\n\n\nvoid\n PostRecord(int value, string segment)\n - save given value as record of current segment (default segment is 'def')\n\n\nvoid\n GetRecord(string segment, Action\n callback)\n - get player record for current segment (default segment is 'def'). \nRecord\n parameter of callback described \nbelow\n\n\nvoid\n GetLeaders(string segment, Action\n callback)\n - get leaderboard of records for current segment (default segment is 'def'). \nLeaderboard\n parameter of callback described \nbelow\n\n\n\n\nRecord class\n\n\nSimple class with single field:\n\n\n\n\nint\n rec\n - record value\n\n\n\n\nLeaderboard class\n\n\nClass contains array of records with fields:\n\n\n\n\nint\n score\n - record value\n\n\nint\n hid\n - readable player id\n\n\nT\n GetProfileData\nT>()\n - return public profile data\n\n\n\n\nNext step\n\n\nSee also \nexamples page", 
            "title": "Records"
        }, 
        {
            "location": "/records/#records-and-leaderboards", 
            "text": "Asset allow you to persist important values as \"records\". Just choose segment and save record or get top records of that segment.  Records method:   void  PostRecord(int value, string segment)  - save given value as record of current segment (default segment is 'def')  void  GetRecord(string segment, Action  callback)  - get player record for current segment (default segment is 'def').  Record  parameter of callback described  below  void  GetLeaders(string segment, Action  callback)  - get leaderboard of records for current segment (default segment is 'def').  Leaderboard  parameter of callback described  below", 
            "title": "Records and leaderboards"
        }, 
        {
            "location": "/records/#next-step", 
            "text": "See also  examples page", 
            "title": "Next step"
        }, 
        {
            "location": "/examples/", 
            "text": "Examples\n\n\n1) First time auth user and save user name to profile\n\n\n// GbaseAPIManager.cs\npublic static void Auth(Action callback = null)\n{\n    GbaseAPI.Instance.AuthGuest(false, callback);\n}\npublic static void SetProfile\nT\n(\nT\n profile)\n{\n    GbaseAPI.Instance.Profile.SetProfileData(profile);\n}\npublic static string GetName()\n{\n    return GbaseAPI.Instance.Profile.GetProfileData().GetString(\nname\n));\n}\npublic static void SaveProfile()\n{\n    GbaseAPI.Instance.Profile.FlushData();\n}\n\n// Profile.cs\nint level;\nstring name;\n\n// AnotherClass.cs\n...\nGbaseAPIManager.Auth();\n...\n// get user name\nGbaseAPIManager.SetProfile(new Profile());\nGbaseAPIManager.SaveProfile();\n...\n\n\n\n\n2) Check profile version. If version is low then increment it and update profile\n\n\n// MyClass.cs\npublic int level = 1;\npublic bool isMale = true;\npublic string[] slots = {\nhead\n, \nbody\n, \nlegs\n, \nweapon\n};\n\n// GbaseAPIManager.cs\npublic static int GetVersion()\n{\n    return GbaseAPI.Instance.Profile.GetVer();\n}\npublic static void SetVersion(int v)\n{\n    return GbaseAPI.Instance.Profile.SetVer(v);\n}\npublic static void SetProfile\nT\n(\nT\n profile)\n{\n    GbaseAPI.Instance.Profile.SetProfileData(profile);\n}\npublic static void SaveProfile()\n{\n    GbaseAPI.Instance.Profile.FlushData();\n}\n\n// NewProfile.cs\nint level;\nstring name;\nbool newField;\n\n// AnotherClass.cs\n...\n// auth already done\nvar currentVersion = 2;\nif (GbaseAPIManager.GetVersion() \n currentVersion)\n{\n    GbaseAPIManager.SetVersion(currentVersion);\n    GbaseAPIManager.SetProfile(new NewProfile());\n    GbaseAPIManager.SaveProfile();\n}\n...\n\n\n\n\n3) If user decided to auth with Odnoklassniki API, but has progress at old profile. Get progress from old profile and save it to new profile\n\n\n// MyClass.cs\npublic int coins;\npublic int level;\npublic string[] achievements;\n\n// GbaseAPIManager.cs\npublic static void Auth(Action callback = null)\n{\n    GbaseAPI.Instance.AuthGuest(false, callback);\n}\npublic static void AuthOdnoklassnikiSdk(string okToken, Action callback = null)\n{\n    GbaseAPI.Instance.AuthOdnoklassnikiSdk(okToken, callback);\n}\npublic static void SetProfile\nT\n(\nT\n profile)\n{\n    GbaseAPI.Instance.Profile.SetProfileData(profile);\n}\npublic static Progress GetProgress()\n{\n    return GbaseAPI.Instance.Profile.GetProfileData\nProgress\n());\n}\npublic static void SaveProfile()\n{\n    GbaseAPI.Instance.Profile.FlushData();\n}\npublic static void Quit()\n{\n    GbaseAPI.Instance.Quit();\n}\n\n// Progress.cs\nint progress;\n\n// AnotherClass.cs\n...\nGbaseAPIManager.Auth();\n...\n// get user decision to use Odnoklassniki API\nvar progress = GbaseAPIManager.GetProgress();\nGbaseAPIManager.Quit();\nGbaseAPIManager.AuthOdnoklassnikiSdk(okToken, () =\n \n{\n    // inside callback, to make sure auth is done\n    GbaseAPIManager.SetProfile(new Progress());\n    GbaseAPIManager.SaveProfile();\n});\n...\n\n\n\n\n4) Example of calling of \nGetLeaders()\n function. Callback print amount of records and first leader name\n\n\n// GbaseAPIManager.cs\npublic static void GetLeaders(string segment, Action\nLeaderboard\n callback = null)\n{\n    GbaseAPI.Instance.GetLeaders(segment, callback);\n}\n\n// PublicProfileData.cs\nstring name;\n\n// SomeClass.cs\n...\n// auth already done\nGbaseAPIManager.GetLeaders(\nmySegment\n, l =\n\n{\n    print(l.records.Length);\n    var pdata = l.records[0].GetProfileData\nTestClass\n();\n    print(pdata != null ? pdata.name : \npdata is null\n);\n});\n...", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#examples", 
            "text": "1) First time auth user and save user name to profile  // GbaseAPIManager.cs\npublic static void Auth(Action callback = null)\n{\n    GbaseAPI.Instance.AuthGuest(false, callback);\n}\npublic static void SetProfile T ( T  profile)\n{\n    GbaseAPI.Instance.Profile.SetProfileData(profile);\n}\npublic static string GetName()\n{\n    return GbaseAPI.Instance.Profile.GetProfileData().GetString( name ));\n}\npublic static void SaveProfile()\n{\n    GbaseAPI.Instance.Profile.FlushData();\n}\n\n// Profile.cs\nint level;\nstring name;\n\n// AnotherClass.cs\n...\nGbaseAPIManager.Auth();\n...\n// get user name\nGbaseAPIManager.SetProfile(new Profile());\nGbaseAPIManager.SaveProfile();\n...  2) Check profile version. If version is low then increment it and update profile  // MyClass.cs\npublic int level = 1;\npublic bool isMale = true;\npublic string[] slots = { head ,  body ,  legs ,  weapon };\n\n// GbaseAPIManager.cs\npublic static int GetVersion()\n{\n    return GbaseAPI.Instance.Profile.GetVer();\n}\npublic static void SetVersion(int v)\n{\n    return GbaseAPI.Instance.Profile.SetVer(v);\n}\npublic static void SetProfile T ( T  profile)\n{\n    GbaseAPI.Instance.Profile.SetProfileData(profile);\n}\npublic static void SaveProfile()\n{\n    GbaseAPI.Instance.Profile.FlushData();\n}\n\n// NewProfile.cs\nint level;\nstring name;\nbool newField;\n\n// AnotherClass.cs\n...\n// auth already done\nvar currentVersion = 2;\nif (GbaseAPIManager.GetVersion()   currentVersion)\n{\n    GbaseAPIManager.SetVersion(currentVersion);\n    GbaseAPIManager.SetProfile(new NewProfile());\n    GbaseAPIManager.SaveProfile();\n}\n...  3) If user decided to auth with Odnoklassniki API, but has progress at old profile. Get progress from old profile and save it to new profile  // MyClass.cs\npublic int coins;\npublic int level;\npublic string[] achievements;\n\n// GbaseAPIManager.cs\npublic static void Auth(Action callback = null)\n{\n    GbaseAPI.Instance.AuthGuest(false, callback);\n}\npublic static void AuthOdnoklassnikiSdk(string okToken, Action callback = null)\n{\n    GbaseAPI.Instance.AuthOdnoklassnikiSdk(okToken, callback);\n}\npublic static void SetProfile T ( T  profile)\n{\n    GbaseAPI.Instance.Profile.SetProfileData(profile);\n}\npublic static Progress GetProgress()\n{\n    return GbaseAPI.Instance.Profile.GetProfileData Progress ());\n}\npublic static void SaveProfile()\n{\n    GbaseAPI.Instance.Profile.FlushData();\n}\npublic static void Quit()\n{\n    GbaseAPI.Instance.Quit();\n}\n\n// Progress.cs\nint progress;\n\n// AnotherClass.cs\n...\nGbaseAPIManager.Auth();\n...\n// get user decision to use Odnoklassniki API\nvar progress = GbaseAPIManager.GetProgress();\nGbaseAPIManager.Quit();\nGbaseAPIManager.AuthOdnoklassnikiSdk(okToken, () =  \n{\n    // inside callback, to make sure auth is done\n    GbaseAPIManager.SetProfile(new Progress());\n    GbaseAPIManager.SaveProfile();\n});\n...  4) Example of calling of  GetLeaders()  function. Callback print amount of records and first leader name  // GbaseAPIManager.cs\npublic static void GetLeaders(string segment, Action Leaderboard  callback = null)\n{\n    GbaseAPI.Instance.GetLeaders(segment, callback);\n}\n\n// PublicProfileData.cs\nstring name;\n\n// SomeClass.cs\n...\n// auth already done\nGbaseAPIManager.GetLeaders( mySegment , l = \n{\n    print(l.records.Length);\n    var pdata = l.records[0].GetProfileData TestClass ();\n    print(pdata != null ? pdata.name :  pdata is null );\n});\n...", 
            "title": "Examples"
        }
    ]
}